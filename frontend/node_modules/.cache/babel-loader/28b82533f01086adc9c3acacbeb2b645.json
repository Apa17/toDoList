{"ast":null,"code":"var _jsxFileName = \"/home/vm/Documents/Work/ToDoList/frontend/src/components/ToDo.js\";\nimport React, { Component } from 'react';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ToDo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      let item = e.value;\n      console.log(e);\n\n      if (!item.text || /^\\s*$/.test(item.text)) {} else {\n        let nombre = item.text;\n        fetch('http://localhost:3000/api/item/save', {\n          method: 'POST',\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: nombre\n          })\n        }).then(() => {\n          console.log('new item added');\n        }).catch(error => console.log(error));\n      }\n\n      this.setInput('');\n    };\n\n    this.handleChange = e => {\n      this.setInput(e.target.value);\n    };\n\n    this.state = {\n      reload: Boolean,\n      items: [],\n      input: String\n    };\n  }\n\n  getItemsGET() {\n    fetch('http://localhost:3000/api/item/all').then(response => response.json()).then(data => {\n      this.setState({\n        items: data\n      });\n      /*\n      console.log(data);\n      console.log(data.length);\n      for (var i = 0; i < data.length; i++) {\n        console.log(data[i].id); //por ahora solo guardemos id y name\n        console.log(data[i].name);\n        console.log(data[i].checked);\n        console.log(data[i].iconid);\n        console.log(data[i].folderid);\n        console.log(data[i].userid);\n      } */\n    }).catch(error => console.log(error));\n  }\n\n  componentDidMount() {\n    this.getItemsGET();\n  }\n\n  setInput(texto) {\n    document.getElementById('input-item').value = texto;\n    this.setState({\n      input: texto\n    });\n  }\n\n  addItem(item) {\n    if (!item.text || /^\\s*$/.test(item.text)) {\n      return;\n    }\n\n    var nombre = item.text;\n    fetch('http://localhost:3000/api/item/save', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: nombre\n      })\n    }).then(() => {\n      console.log('new item added');\n    }).catch(error => console.log(error));\n  }\n\n  render() {\n    if (!this.state.input) {\n      this.state.input = '';\n    }\n\n    const {\n      items\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"List of posts\", items.length ? items.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [item.checked ? /*#__PURE__*/_jsxDEV(\"input\", {\n          id: item.id,\n          defaultChecked: true,\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n          id: item.id,\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 17\n        }, this), item.name, /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"\",\n          children: \" Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 33\n      }, this)) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icons\",\n        children: [/*#__PURE__*/_jsxDEV(RiCloseCircleLine, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(TiEdit, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"todo-form\",\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"input-item\",\n          type: \"text\",\n          placeholder: \"Add a todo\",\n          name: \"text\",\n          className: \"todo-input\",\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"todo-button-item\",\n          children: \" Add todo item\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ToDo;","map":{"version":3,"sources":["/home/vm/Documents/Work/ToDoList/frontend/src/components/ToDo.js"],"names":["React","Component","RiCloseCircleLine","TiEdit","ToDo","constructor","props","handleSubmit","e","preventDefault","item","value","console","log","text","test","nombre","fetch","method","headers","body","JSON","stringify","name","then","catch","error","setInput","handleChange","target","state","reload","Boolean","items","input","String","getItemsGET","response","json","data","setState","componentDidMount","texto","document","getElementById","addItem","render","length","map","checked","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {RiCloseCircleLine} from 'react-icons/ri';\nimport {TiEdit} from 'react-icons/ti';\n\nclass ToDo extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      reload: Boolean,\n      items: [],\n      input: String,\n    }\n  }\n\n  getItemsGET(){\n    fetch('http://localhost:3000/api/item/all')\n      .then(response => response.json())\n      .then(data => {\n        this.setState({items: data});\n        /*\n        console.log(data);\n        console.log(data.length);\n        for (var i = 0; i < data.length; i++) {\n          console.log(data[i].id); //por ahora solo guardemos id y name\n          console.log(data[i].name);\n          console.log(data[i].checked);\n          console.log(data[i].iconid);\n          console.log(data[i].folderid);\n          console.log(data[i].userid);\n        } */\n      }).catch(error => console.log(error));\n  }\n\n  componentDidMount() {\n     this.getItemsGET();\n  }\n\n  setInput(texto){\n    document.getElementById('input-item').value = texto;\n    this.setState({input: texto});\n  }\n\n  addItem(item){\n    if (!item.text || /^\\s*$/.test(item.text)) {\n      return;\n    }\n\n    var nombre = item.text;\n        fetch('http://localhost:3000/api/item/save', {\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ name: nombre})\n          }).then(() => {\n            console.log('new item added');\n          }).catch(error => console.log(error));\n  }\n\n  handleSubmit = e => { \n    e.preventDefault();\n\n    let item = e.value;\n    console.log(e);\n    if (!item.text || /^\\s*$/.test(item.text)) {\n    }else{\n    let nombre = item.text;\n        fetch('http://localhost:3000/api/item/save', {\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ name: nombre})\n          }).then(() => {\n            console.log('new item added');\n          }).catch(error => console.log(error));\n    }\n    \n    this.setInput('');\n  };\n\n  handleChange = e => { \n    this.setInput(e.target.value);\n  };\n\n  render() {\n    if(!this.state.input){\n      this.state.input='';\n    }\n    const { items} = this.state;\n    return (<div>\n        List of posts\n        {\n              items.length ?\n              items.map(item => <div key={item.id}>\n                {item.checked ? \n                <input id={item.id} defaultChecked type=\"checkbox\"  />  : \n                <input id={item.id} type=\"checkbox\"  />  \n                }\n                {item.name}\n                <a href=\"\"> Edit</a>\n                </div>) : null \n        }\n              <div className='icons'> \n              <RiCloseCircleLine /> \n              <TiEdit />\n              </div>  \n          <form className=\"todo-form\" onSubmit={this.handleSubmit}>\n            <input id=\"input-item\"\n                type='text' \n                placeholder='Add a todo' \n                name = 'text' \n                className='todo-input'\n                onChange={this.handleChange}\n            />\n            <button className='todo-button-item'> Add todo item</button>\n            \n        </form>\n    </div>);\n  }\n}\n\nexport default ToDo;\n"]},"metadata":{},"sourceType":"module"}