{"ast":null,"code":"var _jsxFileName = \"/home/vm/Documents/Work/ToDoList/frontend/src/components/ToDo.js\";\nimport React, { Component } from 'react';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ToDo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      let texto = this.state.input;\n\n      if (!(!texto || /^\\s*$/.test(texto))) {\n        await fetch('http://localhost:3000/api/item/save', {\n          method: 'POST',\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            name: texto\n          })\n        }).then(() => {\n          console.log('new item added');\n        }).catch(error => console.log(error));\n      }\n\n      await this.forceUpdate();\n      await this.getItemsGET();\n      this.setInput('');\n    };\n\n    this.handleChange = e => {\n      this.setInput(e.target.value);\n    };\n\n    this.state = {\n      reload: Boolean,\n      items: [],\n      input: String\n    };\n  }\n\n  getItemsGET() {\n    fetch('http://localhost:3000/api/item/all').then(response => response.json()).then(data => {\n      this.setState({\n        items: data\n      });\n      /*\n      console.log(data);\n      console.log(data.length);\n      for (var i = 0; i < data.length; i++) {\n        console.log(data[i].id); //por ahora solo guardemos id y name\n        console.log(data[i].name);\n        console.log(data[i].checked);\n        console.log(data[i].iconid);\n        console.log(data[i].folderid);\n        console.log(data[i].userid);\n      } */\n    }).catch(error => console.log(error));\n  }\n\n  componentDidMount() {\n    this.getItemsGET();\n  }\n\n  setInput(texto) {\n    document.getElementById('input-item').value = texto;\n    this.setState({\n      input: texto\n    });\n  }\n\n  render() {\n    if (!this.state.input) {\n      this.state.input = '';\n    }\n\n    const {\n      items\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"List of posts\", items.length ? items.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [item.checked ? /*#__PURE__*/_jsxDEV(\"input\", {\n          id: item.id,\n          defaultChecked: true,\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n          id: item.id,\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this), item.name, /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"\",\n          children: \" Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 33\n      }, this)) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icons\",\n        children: [/*#__PURE__*/_jsxDEV(RiCloseCircleLine, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(TiEdit, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"todo-form\",\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"input-item\",\n          type: \"text\",\n          placeholder: \"Add a todo\",\n          name: \"text\",\n          className: \"todo-input\",\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"todo-button-item\",\n          children: \" Add todo item\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ToDo;","map":{"version":3,"sources":["/home/vm/Documents/Work/ToDoList/frontend/src/components/ToDo.js"],"names":["React","Component","RiCloseCircleLine","TiEdit","ToDo","constructor","props","handleSubmit","e","preventDefault","texto","state","input","test","fetch","method","headers","body","JSON","stringify","name","then","console","log","catch","error","forceUpdate","getItemsGET","setInput","handleChange","target","value","reload","Boolean","items","String","response","json","data","setState","componentDidMount","document","getElementById","render","length","map","item","checked","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {RiCloseCircleLine} from 'react-icons/ri';\nimport {TiEdit} from 'react-icons/ti';\n\nclass ToDo extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      reload: Boolean,\n      items: [],\n      input: String,\n    }\n  }\n\n  getItemsGET(){\n    fetch('http://localhost:3000/api/item/all')\n      .then(response => response.json())\n      .then(data => {\n        this.setState({items: data});\n        /*\n        console.log(data);\n        console.log(data.length);\n        for (var i = 0; i < data.length; i++) {\n          console.log(data[i].id); //por ahora solo guardemos id y name\n          console.log(data[i].name);\n          console.log(data[i].checked);\n          console.log(data[i].iconid);\n          console.log(data[i].folderid);\n          console.log(data[i].userid);\n        } */\n      }).catch(error => console.log(error));\n  }\n\n  componentDidMount() {\n     this.getItemsGET();\n  }\n\n  setInput(texto){\n    document.getElementById('input-item').value = texto;\n    this.setState({input: texto});\n  }\n\n  handleSubmit = async e => { \n    e.preventDefault();\n\n    let texto = this.state.input;\n\n    if (!(!texto || /^\\s*$/.test(texto))) {\n        await fetch('http://localhost:3000/api/item/save', {\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ name: texto})\n          }).then(() => {\n            console.log('new item added');\n          }).catch(error => console.log(error));\n    }\n    \n    await this.forceUpdate();\n    await this.getItemsGET();\n\n    this.setInput('');\n  };\n\n  handleChange = e => { \n    this.setInput(e.target.value);\n  };\n\n  render() {\n    if(!this.state.input){\n      this.state.input='';\n    }\n    const { items} = this.state;\n    return (<div>\n        List of posts\n        {\n              items.length ?\n              items.map(item => <div key={item.id}>\n                {item.checked ? \n                <input id={item.id} defaultChecked type=\"checkbox\"  />  : \n                <input id={item.id} type=\"checkbox\"  />  \n                }\n                {item.name}\n                <a href=\"\"> Edit</a>\n                </div>) : null \n        }\n              <div className='icons'> \n              <RiCloseCircleLine /> \n              <TiEdit />\n              </div>  \n          <form className=\"todo-form\" onSubmit={this.handleSubmit}>\n            <input id=\"input-item\"\n                type='text' \n                placeholder='Add a todo' \n                name = 'text' \n                className='todo-input'\n                onChange={this.handleChange}\n            />\n            <button className='todo-button-item'> Add todo item</button>\n            \n        </form>\n    </div>);\n  }\n}\n\nexport default ToDo;\n"]},"metadata":{},"sourceType":"module"}