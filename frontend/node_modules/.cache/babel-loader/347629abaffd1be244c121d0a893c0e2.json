{"ast":null,"code":"var _jsxFileName = \"/home/vm/Documents/Work/ToDoList/frontend/src/components/ToDo.js\";\nimport React, { Component } from 'react';\nimport { RiCloseCircleLine } from 'react-icons/ri';\nimport { TiEdit } from 'react-icons/ti';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ToDo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addItem = item => {\n      if (!item.text || /^\\s*$/.test(item.text)) {\n        return;\n      }\n\n      var nombre = item.text;\n      fetch('http://localhost:3000/api/item/save', {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          name: nombre\n        })\n      }).then(() => {\n        console.log('new item added');\n      }).catch(error => console.log(error));\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.additem(e);\n      this.setInput('');\n    };\n\n    this.handleChange = e => {\n      this.setInput(e.target.value);\n    };\n\n    this.state = {\n      reload: Boolean,\n      items: [],\n      input: String\n    };\n  }\n\n  getItemsGET() {\n    fetch('http://localhost:3000/api/item/all').then(response => response.json()).then(data => {\n      this.setState({\n        items: data\n      });\n      /*\n      console.log(data);\n      console.log(data.length);\n      for (var i = 0; i < data.length; i++) {\n        console.log(data[i].id); //por ahora solo guardemos id y name\n        console.log(data[i].name);\n        console.log(data[i].checked);\n        console.log(data[i].iconid);\n        console.log(data[i].folderid);\n        console.log(data[i].userid);\n      } */\n    }).catch(error => console.log(error));\n  }\n\n  componentDidMount() {\n    this.getItemsGET();\n  }\n\n  setInput(texto) {\n    this.setState({\n      input: texto\n    });\n  }\n\n  render() {\n    const {\n      items\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"List of posts\", items.length ? items.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [item.checked ? /*#__PURE__*/_jsxDEV(\"input\", {\n          id: item.id,\n          defaultChecked: true,\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n          id: item.id,\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this), item.name, /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"\",\n          children: \" Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 33\n      }, this)) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"icons\",\n        children: [/*#__PURE__*/_jsxDEV(RiCloseCircleLine, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(TiEdit, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"todo-form\",\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Add a todo\",\n          value: this.state.input,\n          name: \"text\",\n          className: \"todo-input\",\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"todo-button-item\",\n          children: \" Add todo item\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ToDo;","map":{"version":3,"sources":["/home/vm/Documents/Work/ToDoList/frontend/src/components/ToDo.js"],"names":["React","Component","RiCloseCircleLine","TiEdit","ToDo","constructor","props","addItem","item","text","test","nombre","fetch","method","headers","body","JSON","stringify","name","then","console","log","catch","error","handleSubmit","e","preventDefault","additem","setInput","handleChange","target","value","state","reload","Boolean","items","input","String","getItemsGET","response","json","data","setState","componentDidMount","texto","render","length","map","checked","id"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {RiCloseCircleLine} from 'react-icons/ri';\nimport {TiEdit} from 'react-icons/ti';\n\nclass ToDo extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      reload: Boolean,\n      items: [],\n      input: String,\n    }\n  }\n\n  getItemsGET(){\n    fetch('http://localhost:3000/api/item/all')\n      .then(response => response.json())\n      .then(data => {\n        this.setState({items: data});\n        /*\n        console.log(data);\n        console.log(data.length);\n        for (var i = 0; i < data.length; i++) {\n          console.log(data[i].id); //por ahora solo guardemos id y name\n          console.log(data[i].name);\n          console.log(data[i].checked);\n          console.log(data[i].iconid);\n          console.log(data[i].folderid);\n          console.log(data[i].userid);\n        } */\n      }).catch(error => console.log(error));\n  }\n\n  componentDidMount() {\n     this.getItemsGET();\n  }\n\n  setInput(texto){\n    this.setState({input: texto})\n  }\n  addItem = item => {\n    if (!item.text || /^\\s*$/.test(item.text)) {\n      return;\n    }\n\n    var nombre = item.text;\n        fetch('http://localhost:3000/api/item/save', {\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({ name: nombre})\n          }).then(() => {\n            console.log('new item added');\n          }).catch(error => console.log(error));\n  }\n\n  handleSubmit = e => { \n    e.preventDefault();\n\n    this.additem(e);\n    \n    this.setInput('');\n  };\n\n  handleChange = e => { \n    this.setInput(e.target.value);\n  };\n\n  render() {\n    const { items} = this.state;\n    return (<div>\n        List of posts\n        {\n              items.length ?\n              items.map(item => <div key={item.id}>\n                {item.checked ? \n                <input id={item.id} defaultChecked type=\"checkbox\"  />  : \n                <input id={item.id} type=\"checkbox\"  />  \n                }\n                {item.name}\n                <a href=\"\"> Edit</a>\n                </div>) : null \n        }\n              <div className='icons'> \n              <RiCloseCircleLine /> \n              <TiEdit />\n              </div>  \n          <form className=\"todo-form\" onSubmit={this.handleSubmit}>\n            <input \n                type='text' \n                placeholder='Add a todo' \n                value = {this.state.input} \n                name = 'text' \n                className='todo-input'\n                onChange={this.handleChange}\n            />\n            <button className='todo-button-item'> Add todo item</button>\n            \n        </form>\n    </div>);\n  }\n}\n\nexport default ToDo;\n"]},"metadata":{},"sourceType":"module"}